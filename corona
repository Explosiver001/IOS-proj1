##########################################################################
#
#   IOS - projekt 1
#       rok:    2022/2023
#       autor:  xnovak3g  <xnovak3g@stud.fit.vutbr.cz>
#        
#   poznamka:   -script zpracovava vzdy jen 1 radek najednou, cimz je take ovlivnena rychlost
#               -mel by vzdy zpracovat vsechna data, chce to jen trochu trpelivosti
#
#########################################################################
#!/bin/bash
max_width=0 #maximalni pocet lidi z dat
width=0 #zadana maximalni delka radku u histogramu
declare -a default_width=(0 0 0 100000 10000 500 10000 100000 100 1000 10000) #pocet lidi na 1 # pokud neni zadana delka 
declare -a counts=(0 0 0) #pocty pro dender

declare -a filters=(0 0 0 0) #ktere filtry jsou pouzity
command_switch=0 #ktery prikaz je pouzit
date_return_value=0 #navrat z overeni data
date_after=0 #datum po
date_before=99999999 #datum pred
declare -a months_days=(31 28 31 30 31 30 31 31 30 31 30 31) #pocty dni v mesici

declare -a inputFiles #seznam vstupnich souboru
declare -a age=(0 0 0 0 0 0 0 0 0 0 0 0 0) #vekove skupiny

data="" #aktualne prochazeny data
declare -a dataCodes=("None") #seznam vsech datovych skupin
declare -a dataNumbers=(0) #pocty pro vsechny datove skupiny

#
#   Serazeni poli dataCodes a dataNumbers
#   pole dataNumbers se seradi v zavislosti na poli dataCodes
#
sort () {
    for ((i=0; i<${#dataCodes[@]}; i++)); do
        min=$i
        for ((j=$(($i+1)); j<${#dataCodes[@]}; j++)); do
            if [[ "${dataCodes[$j]}" < "${dataCodes[$min]}" ]]; then
                min=$j
            fi
        done
        temp=${dataCodes[$i]}
        dataCodes[$i]=${dataCodes[$min]}
        dataCodes[$min]=$temp
        temp2=${dataNumbers[$i]}
        dataNumbers[$i]=${dataNumbers[$min]}
        dataNumbers[$min]=$temp2
    done
}

#
#   Vyhledani indexu odpovidajicich dat, pokud jsou v poli ulozena
#   pokud nejsou patricna data ulozena v poli, jsou do pole vlozena
#
dataLookup () {
    if [ "$data" == "" ]; then
        dataNumbers[0]=$((${dataNumbers[0]}+1))
        return 0
    fi
    for i in ${!dataCodes[@]}; do
        if [[ "${dataCodes[i]}" == "${data}" ]]; then 
            dataNumbers[$i]=$(( ${dataNumbers[$i]} + 1 ))
            return 0
        fi
    done
    
    dataCodes+=($data)
    dataNumbers[$(( ${#dataCodes[@]} - 1 ))]=1
    return 0
}

#
#   hledani maximalni hodnoty v poctech nakazenych
#
maxWidth () {
    if [ $command_switch -ne 4 ]; then 
        for i in ${dataNumbers[@]}; do
            if [ $i -gt $max_width ]; then
                max_width=$i
            fi
        done
        return
    else
        for i in ${age[@]}; do
            if [ $i -gt $max_width ]; then
                max_width=$i
            fi
        done
        return
    fi
}

#
#   vypis histogramu
#
histogram () { 
    if [ $width -gt 0 ] 
    then
        step=$(($width*$1/$max_width))
        for ((i=0; i<$step; i++)); do
            printf "#"
        done
    else
        step=$(($1/${default_width[$command_switch]}))
        for ((i=0; i<$step; i++)); do
            printf "#"
        done
    fi
    printf "\n"

}

#
#   Overeni prestupneho roku
#
leap_year () {
    if [[ $(( $1 % 100 )) -ne 0  &&  $(( $1 % 4 )) -eq 0  ||  $(( $1 % 400 )) -eq 0 ]]; then 
            months_days[1]=29
        else
            months_days[1]=28
        fi
}

#
#   Overeni spravnosti data (format, odpovidajici pocet dnu v mesici a mesicu v roce)
#
date_check () {
    IFS='-' read -r -a date <<< "$1"
    
    if [[ $1 =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then 
        leap_year ${date[0]}
    else    
        return 1
    fi   
    if [[ $(( 10#${date[1]} )) -gt 0 &&  $(( 10#${date[1]} )) -le 12 && $(( 10#${date[2]} )) -gt 0 && $(( 10#${date[2]} )) -le $(( ${months_days[ $(( 10#${date[1]} ))-1]} )) ]]; then    
        date_return_value=$(( ${date[0]}*10000 + 10#${date[1]}*100 + 10#${date[2]} ))
        return 0
    else    
        date_return_value=0
        return 0
    fi
}

#
#   Overeni spravnosti veku
#
age_check () {
    if [[ "$1" == "" ]]; then
        return 1
    elif ! [[ $1  =~ ^[0-9]+$ ]]; then
        return 0
    elif [ $1 -lt 0 ]; then
        return 0
    else
        return 1
    fi
}

#
#   Kontrola, zda radek splnuje podminky filtru
#
check_line () {
    passed=1
        IFS=',' read -r -a column <<< "$line"
        if [[ ${filters[0]} -ne 0 || ${filters[1]} -ne 0 ]]; then
            date_check ${column[1]}
            if [[ $date_return_value -lt $date_after || $date_return_value -gt $date_before ]]; then
                passed=0
            fi
            date_return_value=0
        fi
        if [ $command_switch -ne 3 ]; then
            if [ ${filters[2]} -eq 1 ]; then
                if [ ${column[3]} != "M" ]
                then 
                    passed=0
                fi
            elif [ ${filters[2]} -eq 2 ]; then
                if [ ${column[3]} != "Z" ]; then 
                    passed=0
                fi
            fi
        fi
    return $passed

}

inputStatus=1
#
#   Ziskani vstupu
#
while [ -n "$1" ]
do  
    #echo $1
    case "$1" in
    #HELP
    -h) 
        printf  "corona [-h] pro blizsi vysvetleni!\n\nCOMMAND může být jeden z:\n\tinfected — spočítá počet nakažených\n\tmerge — sloučí několik souborů se záznamy do jednoho, zachovávající původní pořadí (hlavička bude ve výstupu jen jednou)\n\tgender — vypíše počet nakažených pro jednotlivá pohlaví\n\tage — vypíše statistiku počtu nakažených osob dle věku (bližší popis je níže)\n\tdaily — vypíše statistiku nakažených osob pro jednotlivé dny\n\tmonthly — vypíše statistiku nakažených osob pro jednotlivé měsíce\n\tyearly — vypíše statistiku nakažených osob pro jednotlivé roky\n\tcountries — vypíše statistiku nakažených osob pro jednotlivé země nákazy (bez ČR, tj. kódu CZ)\n\tdistricts — vypíše statistiku nakažených osob pro jednotlivé okresy\n\tdatas — vypíše statistiku nakažených osob pro jednotlivé kraje\n\nFILTERS může být kombinace následujících (každý maximálně jednou):\n\t-a DATETIME — after: jsou uvažovány pouze záznamy PO tomto datu (včetně tohoto data). DATETIME je formátu YYYY-MM-DD\n\t-b DATETIME — before: jsou uvažovány pouze záznamy PŘED tímto datem (včetně tohoto data)\n\t-g GENDER — jsou uvažovány pouze záznamy nakažených osob daného pohlaví. GENDER může být M (muži) nebo Z (ženy)\n\t-s [WIDTH] u příkazů gender, age, daily, monthly, yearly, countries, districts a datas vypisuje data ne číselně, ale graficky v podobě histogramů.\n\t Nepovinný parametr WIDTH nastavuje šířku histogramů, tedy délku nejdelšího řádku, na WIDTH. Tedy, WIDTH musí být kladné celé číslo.\n\t Pokud není parametr WIDTH uveden, řídí se šířky řádků výchozími hodnotami\n"
        exit 0
        ;;
    #COMMANDY
    infected)
        if [ $inputStatus -le 2 ]; then
            inputStatus=2
            if [ $command_switch -ne 0 ]; then
                printf "Nemohou byt soucasne zadany 2 prikazy!\ncorona -h pro blizsi vysvetleni!\n" <&2
                exit 1
            fi 
            command_switch=1
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        
        ;;
    merge)
        if [ $inputStatus -le 2 ]; then
            inputStatus=2
            if [ $command_switch -ne 0 ] ; then
                printf "Nemohou byt soucasne zadany 2 prikazy!\ncorona -h pro blizsi vysvetleni!\n" <&2
                exit 1
            fi
            command_switch=2
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    gender)
        if [ $inputStatus -le 2 ]; then
            inputStatus=2
            if [ $command_switch -ne 0 ]; then
                printf "Nemohou byt soucasne zadany 2 prikazy!\ncorona -h pro blizsi vysvetleni!\n" <&2
                exit 1
            fi
            command_switch=3    
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    age)
        if [ $inputStatus -le 2 ]; then
            inputStatus=2
            if [ $command_switch -ne 0 ]; then
                printf "Nemohou byt soucasne zadany 2 prikazy!\ncorona -h pro blizsi vysvetleni!\n" <&2
                exit 1
            fi
            command_switch=4
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    daily)
        if [ $inputStatus -le 2 ]; then
            inputStatus=2
            if [ $command_switch -ne 0 ]; then
                printf "Nemohou byt soucasne zadany 2 prikazy!\ncorona -h pro blizsi vysvetleni!\n" <&2
                exit 1
            fi
            command_switch=5
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    monthly)
        if [ $inputStatus -le 2 ]; then
            inputStatus=2
            if [ $command_switch -ne 0 ]; then
                printf "Nemohou byt soucasne zadany 2 prikazy!\ncorona -h pro blizsi vysvetleni!\n" <&2
                exit 1
            fi
            command_switch=6
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    yearly)
        if [ $inputStatus -le 2 ]; then
            inputStatus=2
            if [ $command_switch -ne 0 ] 
            then
                printf "Nemohou byt soucasne zadany 2 prikazy!\ncorona -h pro blizsi vysvetleni!\n" <&2
                exit 1
            fi
            command_switch=7
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    countries)
        if [ $inputStatus -le 2 ]; then
            inputStatus=2
            if [ $command_switch -ne 0 ]; then
                printf "Nemohou byt soucasne zadany 2 prikazy!\ncorona -h pro blizsi vysvetleni!\n" <&2
                exit 1
            fi
            command_switch=8
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    districts)
        if [ $inputStatus -le 2 ]; then
            inputStatus=2
            if [ $command_switch -ne 0 ]; then
                printf "Nemohou byt soucasne zadany 2 prikazy!\ncorona -h pro blizsi vysvetleni!\n" <&2
                exit 1
            fi
            command_switch=9
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    regions)
        if [ $inputStatus -le 2 ]; then
            inputStatus=2
            if [ $command_switch -ne 0 ]; then
                printf "Nemohou byt soucasne zadany 2 prikazy!\ncorona -h pro blizsi vysvetleni!\n" <&2
                exit 1
            fi
            command_switch=10
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    #FILTRY    
    -a) 
        if [ $inputStatus -eq 1 ]; then
            date_check $2
            if [ $? -ne 1 ]; then
                if [ ${filters[0]} -eq 0 ]; then 
                    filters[0]=1
                    
                    if [ $date_return_value -eq 0 ]; then 
                        printf "Datum musi byt skutecne!\n" >&2
                        exit 1
                    else
                        date_after=$date_return_value
                        date_return_value=0
                    fi
                else
                    printf "Filtr -a muze byt zvolen pouze jednou!\n" >&2
                fi
                shift
            fi
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
        
    -b)
        if [ $inputStatus -eq 1 ]; then
            date_check $2
            if [ $? -ne 1 ]; then
                if [ ${filters[1]} -eq 0 ]; then 
                    filters[1]=1
                    
                    if [ $date_return_value -eq 0 ]; then 
                        printf "Datum musi byt skutecne!\n" >&2
                        exit 1
                    else
                        date_before=$date_return_value
                        date_return_value=0
                    fi
                else
                    printf "Filtr -b muze byt zvolen pouze jednou!\n" >&2
                fi
                shift
            fi
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    -g)
        if [ $inputStatus -eq 1 ]; then
            case "$2" in
                M)  
                    if [ ${filters[2]} -eq 0 ]; then 
                        filters[2]=1
                    else
                        printf "Filtr -g muze byt zvolen pouze jednou!\n" >&2
                    fi
                    shift
                ;;
                Z) 
                    if [ ${filters[2]} -eq 0 ]; then 
                            filters[2]=2
                    else
                        printf "Filtr -g muze byt zvolen pouze jednou!\n" >&2
                    fi
                    shift
                ;;
            esac
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    -s)
        if [ $inputStatus -eq 1 ]; then
            if [ ${filters[3]} -eq 0 ]
            then 
                if [[ $2 =~ ^[0-9]+$ ]] ; then
                    if [ $2 -gt 0 ]; then
                        width=$2
                        filters[3]=1
                        shift
                    else
                        echo "Parametr [WIDTH] musi byt cislice vetsi nez 0!" >&2
                        exit 1
                    fi
                else 
                    filters[3]=1
                fi
            else
                printf "Filtr -s muze byt zvolen pouze jednou!\n" >&2
            fi
        else
            printf "Dodrzujte poradi argumentu!\ncorona -h pro blizsi vysvetleni!\n" <&2
            exit 1
        fi
        ;;
    # soubory
    *)  
        inputStatus=4
        if [ -r $1 ] && [[ "$1" != *".bz2" ]] && [[ "$1" != *".gz" ]]; then
            inputFiles=(${inputFiles[@]} "$1")
        elif [[ "$1" == *".csv.bz2" ]]; then 
            bunzip2 $1
            inputFiles=(${inputFiles[@]} "${1%.bz2}")
        elif [[ "$1" == *"csv.gz" ]]; then
            gunzip $1
            inputFiles=(${inputFiles[@]} "${1%.gz}")
        fi
        ;;
    esac
   
shift
done

#
#   pokud neni zadan vstupni soubor, pouzije se stdin
#
if [ ${#inputFiles[@]} -eq 0 ]; then
    inputFiles+=("${1:-/dev/stdin}")
fi

#pomocny vypis aktivnich filtru a souboru
#printf "COMMAND: $command_switch\n"
#printf "FILTRY: -a ${filters[0]},  -b ${filters[1]},  -g ${filters[2]},  -s ${filters[3]}\n"
#printf "SOUBORY: ${inputFiles[0]}, ${inputFiles[1]}\n\n"

case "$command_switch" in
    1)  #infected
        count=0
        for input in ${inputFiles[@]}; do #cteni ze vsech zadanych souboru
            while IFS= read -r line; do #cteni po jednotlivych radcich
                passed=1
                line=${line//[[:blank:]]/} #odstraneni bilych znaku
                if [[ "$line" != *"datum,vek,"* ]] && [ ! -z "$line" ]; then
                    IFS=',' read -r -a column <<< "$line"
                    date_check ${column[1]}
                    age_check ${column[2]}
                    age_return_value=$?

                    if [[ $passed -eq 1 && $date_return_value -ne 0 && $age_return_value -eq 1 ]]; then #kontrola chybnych dat na radku
                        if [[ ${filters[0]} -ne 0 || ${filters[1]} -ne 0 || ${filters[2]} -ne 0 ]]; then #filtrovani radku podle zadanych filtru
                            check_line
                            passed=$?
                        fi
                        
                        
                        if [ $passed -eq 1 ]; then
                            count=$(($count+1))
                        fi
                    else
                        if [ $age_return_value -eq 0 ]; then 
                            printf "Invalid age: $line\n" >&2
                        elif [ $date_return_value -eq 0 ]; then 
                            printf "Invalid date: $line\n" >&2
                        fi
                    fi
                fi
            done < "$input"
        done
        printf "Celkem nakazenych: $count\n"
    ;;
    0|2)  #merge
        IFS= read -r line < ${inputFiles[0]}
        echo $line
        for input in ${inputFiles[@]}; do
            while IFS= read -r line; do
                passed=1
                line=${line//[[:blank:]]/}
                if [[ "$line" != *"datum,vek,"* ]] && [ ! -z "$line" ]; then
                    IFS=',' read -r -a column <<< "$line"
                    date_check ${column[1]}
                    age_check ${column[2]}
                    age_return_value=$?

                    if [[ $passed -eq 1 && $date_return_value -ne 0 && $age_return_value -eq 1 ]]; then
                        if [[ ${filters[0]} -ne 0 || ${filters[1]} -ne 0 || ${filters[2]} -ne 0 ]]; then
                            check_line
                            passed=$?
                        fi
                        
                        
                        if [ $passed -eq 1 ]; then
                            echo $line
                        fi
                    else
                        if [ $age_return_value -eq 0 ]; then 
                            printf "Invalid age: $line\n" >&2
                        elif [ $date_return_value -eq 0 ]; then 
                            printf "Invalid date: $line\n" >&2
                        fi
                    fi
                fi
            done < "$input"
        done
    ;;
    4)  #age
        for input in ${inputFiles[@]}; do
            while IFS= read -r line; do
                line=${line//[[:blank:]]/}
                if [[ "$line" != *"datum,vek,"* ]] && [ ! -z "$line" ]; then
                    IFS=',' read -r -a column <<< "$line"
                    date_check ${column[1]}
                    passed=1
                    if [[ $date_return_value -ne 0 ]]; then
                        if [[ ${filters[0]} -ne 0 || ${filters[1]} -ne 0 || ${filters[2]} -ne 0 ]]; then
                            check_line
                            passed=$?
                        fi

                        date_check ${column[1]}
                        if [[ $passed -eq 1 && $date_return_value -ne 0 ]]; then 
                            if [[ "${column[2]}" == "" ]];                          then
                                age[12]=$((${age[12]}+1))
                            elif ! [[ ${column[2]}  =~ ^[0-9]+$ ]];                 then
                                printf "Invalid age: $line\n" >&2
                            elif [ ${column[2]} -lt 0 ];                            then
                                printf "Invalid age: $line\n" >&2
                            elif [[ ${column[2]} -ge 0 && ${column[2]} -le 5 ]];    then
                                age[0]=$((${age[0]}+1))
                            elif [[ ${column[2]} -ge 6 && ${column[2]} -le 15 ]];   then
                                age[1]=$((${age[1]}+1))
                            elif [[ ${column[2]} -ge 16 && ${column[2]} -le 25 ]];  then
                                age[2]=$((${age[2]}+1))
                            elif [[ ${column[2]} -ge 26 && ${column[2]} -le 35 ]];  then
                                age[3]=$((${age[3]}+1))
                            elif [[ ${column[2]} -ge 36 && ${column[2]} -le 45 ]];  then
                                age[4]=$((${age[4]}+1))
                            elif [[ ${column[2]} -ge 46 && ${column[2]} -le 55 ]];  then
                                age[5]=$((${age[5]}+1))
                            elif [[ ${column[2]} -ge 56 && ${column[2]} -le 65 ]];  then
                                age[6]=$((${age[6]}+1))
                            elif [[ ${column[2]} -ge 66 && ${column[2]} -le 75 ]];  then
                                age[7]=$((${age[7]}+1))
                            elif [[ ${column[2]} -ge 76 && ${column[2]} -le 85 ]];  then
                                age[8]=$((${age[8]}+1))
                            elif [[ ${column[2]} -ge 86 && ${column[2]} -le 95 ]];  then
                                age[9]=$((${age[9]}+1))
                            elif [[ ${column[2]} -ge 96 && ${column[2]} -le 105 ]]; then
                                age[10]=$((${age[10]}+1))
                            elif [ ${column[2]} -gt 105 ]; then
                                age[11]=$((${age[11]}+1))
                            fi
                        elif [ $date_return_value -eq 0 ]; then
                            printf "Invalid date: $line\n" >&2
                        fi
                    else
                        if [ $date_return_value -eq 0 ]; then 
                            printf "Invalid date: $line\n" >&2
                        fi
                    fi
                fi
            done < "$input"
        done
        if [ ${filters[3]} -eq 1 ]; then #histogram
            maxWidth
            printf "0-5   : "; histogram ${age[0]} 
            printf "6-15  : "; histogram ${age[1]}; 
            printf "16-25 : "; histogram ${age[2]}; 
            printf "26-35 : "; histogram ${age[3]};
            printf "36-45 : "; histogram ${age[4]}; 
            printf "46-55 : "; histogram ${age[5]}; 
            printf "56-65 : "; histogram ${age[6]}; 
            printf "66-75 : "; histogram ${age[7]}; 
            printf "76-85 : "; histogram ${age[8]}; 
            printf "86-95 : "; histogram ${age[9]}; 
            printf "96-105: "; histogram ${age[10]};
            printf ">105  : "; histogram ${age[11]};
        else
            printf "0-5   : ${age[0]}\n6-15  : ${age[1]}\n16-25 : ${age[2]}\n26-35 : ${age[3]}\n36-45 : ${age[4]}\n46-55 : ${age[5]}\n56-65 : ${age[6]}\n66-75 : ${age[7]}\n76-85 : ${age[8]}\n86-95 : ${age[9]}\n96-105: ${age[10]}\n>105  : ${age[11]}\n"
            if [ ${age[12]} -ne 0 ]; then
                printf "None: ${age[12]}\n"
            fi
        fi
    ;;
    *)  #gender, daily-regions
        # pro vsechny tyto prikazy je pouzit stejny princip ziskavani dat (nekde jsou pouze provedeny mensi upravy)
        for input in ${inputFiles[@]}; do
                while IFS= read -r line; do
                    #line="${line// /}"
                    line=${line//[[:blank:]]/}
                    if [[ "$line" != *"datum,vek,"* ]] && [ ! -z "$line" ]; then
                    passed=1
                    IFS=',' read -r -a column <<< "$line"
                        if [[ ${filters[0]} -ne 0 || ${filters[1]} -ne 0 || ${filters[2]} -ne 0 ]]; then
                            check_line
                            passed=$?
                        fi

                        date_check ${column[1]}
                        age_check ${column[2]}
                        age_return_value=$?

                        if [[ $passed -eq 1 && $date_return_value -ne 0 && $age_return_value -eq 1 ]]; then 
                            case "$command_switch" in
                            3)
                                data=${column[3]}
                                dataLookup
                            ;;
                            5)  #daily
                                data=${column[1]}
                                dataLookup
                            ;;
                            6)  #monthly
                                data=${column[1]::7}
                                dataLookup 
                            ;;
                            7)  #yearly
                                data=${column[1]::4}
                                dataLookup 
                            ;;
                            8)  #countries
                                if [[ "${column[7]}" != "" ]]; then
                                    data=${column[7]}
                                    dataLookup 
                                fi
                            ;;
                            9)  #districts
                                data=${column[5]}
                                dataLookup
                            ;;
                            10) #regions
                                data=${column[4]}
                                dataLookup
                            ;;
                            esac
                        else
                            if [ $age_return_value -eq 0 ]; then 
                                printf "Invalid age: $line\n" >&2
                            elif [ $date_return_value -eq 0 ]; then 
                                printf "Invalid date: $line\n" >&2
                            fi
                        fi
                    fi
                done < "$input"
            done

            sort
            if [ $command_switch -eq 3 ]; then 
                temp=${dataCodes[2]}
                dataCodes[2]=${dataCodes[1]}
                dataCodes[1]=$temp
                temp=${dataNumbers[2]}
                dataNumbers[2]=${dataNumbers[1]}
                dataNumbers[1]=$temp
            fi
                if [ ${filters[3]} -eq 1 ]; then
                    maxWidth
                    for i in ${!dataCodes[@]}; do
                        if ! [[ "${dataCodes[$i]}" == "None" && ${dataNumbers[$i]} -eq 0 ]]; then
                            printf "${dataCodes[$i]}: "
                            histogram ${dataNumbers[$i]}
                        fi
                    done
                else
                    for i in ${!dataCodes[@]}; do
                        if ! [[ "${dataCodes[$i]}" == "None" && ${dataNumbers[$i]} -eq 0 ]]; then
                            printf "${dataCodes[$i]}: ${dataNumbers[$i]}\n"
                        fi
                    done
                fi
    ;;
esac
exit 0
